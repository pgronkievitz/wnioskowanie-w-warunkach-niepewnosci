#+title: Wnioskowanie w warunkach niepewności
#+subtitle: Piosenki i ich parametry
#+author: Patryk Gronkiewicz 164157
#+language: pl
#+options: toc:nil num:t todo:nil tags:nil
#+startup: beamer latexpreview
#+beamer_theme: Luebeck
#+beamer_color_theme: structure
#+beamer_font_theme: professionalfonts
#+latex_class: beamer
#+latex_class_options: [presentation]
#+property: header-args:R  :session *R* :eval never-export :tangle ./source.R :exports both

* Dane
Dane zaczerpnięte zostały z serwisu [[https://www.kaggle.com/datasets/paradisejoy/top-hits-spotify-from-20002019][Kaggle]][fn::https://www.kaggle.com/datasets/paradisejoy/top-hits-spotify-from-20002019]. Dotyczą one najpopularniejszych piosenek w serwisie Spotify w latach 2000-2019.
* Dostępne kolumny
Dostępnymi kolumnami w tym zbiorze danych są
=artist song duration_ms explicit year popularity danceability energy key loudness mode speechiness acousticness instrumentalness liveness valence tempo genre=.
Jest jednak istotny problem --- dany utwór może znajdować się w wielu kategoriach.
Na potrzeby zadania pierwszy gatunek przypisany do danego utworu został uznany za właściwy.
* Wczytanie danych
#+begin_src R :exports none :eval never
options(menu.graphics = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("graph", "Rgraphviz"))
setRepositories()
2
install.packages("gRain", dependencies=TRUE);
install.packages("bnlearn")
#+end_src

#+begin_src R
library(bnlearn)
df <- data.frame(read.csv("./songs_normalize.csv"))
colnames(df)
head(df[c("artist",  "song", "genre")], 3)
#+end_src

#+RESULTS:
| Britney Spears | Oops!...I Did It Again | pop          |
| blink-182      | All The Small Things   | rock, pop    |
| Faith Hill     | Breathe                | pop, country |

* Zamiana gatunków na factory
#+begin_src R
library(stringr)
library(forcats)
one_gen <- function(entry)
  str_split(entry, ", ")[[1]][1]
df$genre <- as_factor(sapply(c(df$genre), one_gen))
df$explicit <- df$explicit == "True"
head(df[c("artist",  "song", "genre")], 3)
#+end_src

#+RESULTS:
| Britney Spears | Oops!...I Did It Again | pop  |
| blink-182      | All The Small Things   | rock |
| Faith Hill     | Breathe                | pop  |
* Przygotowanie instrumentalności
Należało ją zlogarytmować ze względu na bardzo duże rozbieżności w danych. Ich rzędy wielkości są bardziej adekwatne do porównania

#+begin_src R :eval never
par(mfrow = c(2, 1))
hist(df$instrumentalness)
hist(log(df$instrumentalness))
#+end_src

#+RESULTS:

* Porównanie $\log{\mathrm{instrumentalness}}$
#+attr_latex: :width 0.7\textwidth
[[./hists.pdf]]
#+begin_src R :exports none :results nil
pdf("hists.pdf")
par(mfrow = c(2, 1))
hist(df$instrumentalness)
hist(log(df$instrumentalness))
a <- dev.off()
par(mfrow = c(1, 1))
#+end_src

#+RESULTS:
| 1 |
| 1 |

* Przygotowanie do dyskretyzacji
Większość danych ma charakter ciągły, w związku z tym należało je zdyskretyzować.
Część danych należało przetworzyć:
+ Wyłączyć artystów i tytuły z czynników
+ Skonwertować liczby całkowite do zmiennoprzecinkowych
+ W przypadku instrumentalności zlogarytmować i usunąć nieskończoności.
#+begin_src R :results nil :exports source
df <- subset(df, select = -c(artist, song))
df$duration_ms <- df$duration_ms/1.0
df$popularity <- df$popularity/1.0
head(df, 3)
#+end_src

#+RESULTS:
| 211160 | FALSE | 2000 | 77 | 0.751 | 0.834 | 1 | -5.444 | 0 | 0.0437 |    0.3 | 1.77e-05 | 0.355 | 0.894 |  95.053 | pop  |
| 167066 | FALSE | 1999 | 79 | 0.434 | 0.897 | 0 | -4.918 | 1 | 0.0488 | 0.0103 |        0 | 0.612 | 0.684 | 148.726 | rock |
| 250546 | FALSE | 1999 | 66 | 0.529 | 0.496 | 7 | -9.007 | 1 |  0.029 |  0.173 |        0 | 0.251 | 0.278 | 136.859 | pop  |

* Przygotowanie do dyskretyzacji
#+begin_src R
df$instrumentalness <- log(df$instrumentalness)
df$instrumentalness[df$instrumentalness == -Inf] <- min(df[df$instrumentalness != -Inf, ]$instrumentalness) - 1
explicit <- df$explicit
year <- df$year
key <- df$key
mode <- df$mode
instrumentalness <- df$instrumentalness
#+end_src

#+RESULTS:

* Dyskretyzacja i finalna ramka danych
Instrumentalność została zdyskretyzowana używając metody interwałowej, ponieważ kwantylowa generowała przedziały o długości 0, co jest błędem.
#+begin_src R
df <- discretize(subset(df, select = -c(explicit, year, key, mode, instrumentalness)), breaks = 10)
df$explicit <- as.factor(explicit)
df$year <- as.factor(year)
df$key <- as.factor(key)
df$mode <- as.factor(mode)
tmp <- discretize(data.frame(instrumentalness), breaks = 10, method = "interval")
df$instrumentalness <- tmp$instrumentalness
#+end_src

#+RESULTS:

#+RESULTS:
| (207866,215452] | (75,78]   | (0.745,0.7882] | (0.819,0.861]   | (-5.7374,-5.285]  | (0.04287,0.04936] | (0.2292,0.3541]    | (0.2832,0.358] | (0.847,0.973]   | (87.0241,95.8014] | pop  | FALSE | 2000 | 1 | 0 | c(3, 1, 1) |
| [113000,186825] | (78,89]   | [0.129,0.478]  | (0.861,0.906]   | (-5.285,-4.8864]  | (0.04287,0.04936] | (0.008768,0.01927] | (0.358,0.853]  | (0.621,0.6873]  | (140.023,159.204] | rock | FALSE | 1999 | 0 | 1 | c(3, 1, 1) |
| (241924,255911] | (65.5,69] | (0.478,0.554]  | [0.0549,0.5129] | [-20.514,-7.8806] | [0.0232,0.0317]   | (0.141,0.2292]     | (0.205,0.2832] | (0.2439,0.3508] | (129.999,140.023] | pop  | FALSE | 1999 | 7 | 1 | c(3, 1, 1) |
* Uczenie struktury --- IAMB
#+begin_src R
iamb_graph <- iamb(df)
graphviz.plot(iamb_graph, layout = "dot")
#+end_src
#+attr_latex: :width 1.0\textwidth
[[file:graph.pdf]]
#+begin_src R :exports none
pdf("graph.pdf", height = 3.5)
graphviz.plot(iamb_graph, layout = "dot")
a <- dev.off()
#+end_src
* Uczenie struktury --- GS
#+begin_src R
gs_graph <- gs(df)
graphviz.plot(gs_graph, layout = "dot")
#+end_src
#+attr_latex: :width 1.0\textwidth
[[file:graph_gs.pdf]]
#+begin_src R :exports none
pdf("graph_gs.pdf", height = 3.5)
graphviz.plot(gs_graph, layout = "dot")
a <- dev.off()
#+end_src
* Uczenie struktury --- PC.STABLE
#+begin_src R
pc_stable_graph <- pc.stable(df)
graphviz.plot(pc_stable_graph, layout = "dot")
#+end_src
#+attr_latex: :width 1.0\textwidth
[[file:graph_pc.pdf]]
#+begin_src R :exports none
pdf("graph_pc.pdf", height=3.5)
graphviz.plot(pc_stable_graph, layout = "dot")
a <- dev.off()
#+end_src
* Przygotowanie sieci do uczenia parametrów
W tym celu skierowano odpowiednie krawędzie --- algorytm GS jako jedyny miał wszystkie krawędzie skierowane.
#+begin_src R
# IAMB
iamb_graph <- set.arc(iamb_graph, "tempo", "speechiness")
iamb_graph <- set.arc(iamb_graph, "key", "mode")
iamb_graph <- set.arc(iamb_graph, "year", "popularity")
# PC.STABLE
pc_stable_graph <- set.arc(pc_stable_graph, "loudness", "energy")
pc_stable_graph <- set.arc(pc_stable_graph, "key", "mode")
#+end_src
* Porównanie straty
Chcemy uzyskać jak najniższą wartość straty w naszej sieci, dlatego wybieramy algorytm o najniższej jej wartości.
#+begin_src R
c(loss(bn.cv(df, iamb_graph)), loss(bn.cv(df, gs_graph)), loss(bn.cv(df, pc_stable_graph)))
#+end_src
Najlepszym okazał się algorytm ~iamb~
* Uczenie parametrów --- ~mle~
Uczenie parametrów z użyciem metody ~mle~ jest domyślną metodą --- w praktyce nie jest konieczne użycie parametru ~method~, jednak został wprowadzony dla dodatkowej czytelności.
#+begin_src R
fit_mle <- bn.fit(iamb_graph, df, method = "mle")
#+end_src
* Wnioskowanie --- wulgarność
#+begin_src R
library(gRain)
junc <- compile(as.grain(fit_mle))
querygrain(setEvidence(junc, evidence = list(explicit="yes")), nodes=c("genre", "speeciness"), type="conditional")
ev_explicit <- querygrain(setEvidence(junc, evidence=list(explicit="yes")))
plot(ev_explicit$genre)
#+end_src
* Wnioskowanie --- wulgarność
Okazuje się, że największą szansę na bycie niecenzuralnymi mają piosenki (w kolejności prawdopodobieństwa): a) pop, b) hip-hop, c) rock, natomiast pozostałe mają bardzo niską zależność.
#+attr_latex: :width 0.7\textwidth
[[file:explicit.pdf]]
#+begin_src R :exports none
pdf("explicit.pdf")
plot(ev_explicit$genre)
a <- dev.off()
#+end_src
* Wnioskowanie --- energy
Głośność w pewnym stopniu zależy od energii utworu, jednak są to wartości stosunkowo niskie.
#+begin_src R
ev_energy <- querygrain(setEvidence(junc, evidence=list(energy="(0.861,0.906]")))
plot(ev_energy$loudness)
#+end_src

#+attr_latex: :width 0.6\textwidth
[[file:energy.pdf]]

#+begin_src R :exports none
pdf("energy.pdf")
plot(ev_explicit$loudness)
a <- dev.off()
#+end_src
* Przykład wnioskowania
Niech $B$ będzie zdarzeniem $\text{key}=0$, natomiast $A$ zdarzeniem $\text{mode}=1$
\begin{align*}
P(A|B)\approx0.33 \\
P(B)\approx0.099\\
P(A)\approx 0.4465 \\
P(B|A)&= \frac{P(A|B)P(B)}{P(A)}\\
&= \frac{0.33\cdot 0.099}{0.4465}=0.073169
\end{align*}

Wynik jest zgodny z obliczeniami sieci ($0.07390817$). Różnica wynika z błędu zaokrągleń.
